name: CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          
      - name: Configure poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          
      - name: Cache poetry virtualenv
        uses: actions/cache@v3
        id: cache
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install --with=dev
        
      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=llm_project_summarizer tests/ --cov-report=xml

  publish:
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/llm-project-summarizer
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          
      - name: Build package
        run: poetry build
        
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
